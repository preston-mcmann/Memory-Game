/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package memory.game;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.Timer;

/**
 *
 * @author mcman
 */
public class MatchingGame extends javax.swing.JFrame {

    User currentUser;
    int index = 0;
    static boolean showTerm = true;
    String[][] CardArray;
    int x = 0;
    int value;
    Sets currentSet;
    DefaultTableModel termTable;
    DefaultTableModel defTable;
    LoginUsers loginUsers;
    Color red = new Color(204, 0, 0);
    Color Default = new Color(211, 211, 211);
    LocalDateTime start;

    public MatchingGame(Sets set, User currentUser, LoginUsers loginUsers) {
        initComponents();
        currentSet = set;
        this.currentUser = currentUser;
        CardArray = set.getCardArray();
        this.loginUsers= loginUsers;
        TermTable.setSelectionBackground(Default);
        DefTable.setSelectionBackground(Default);
        termTable = (DefaultTableModel) TermTable.getModel();
        defTable = (DefaultTableModel) DefTable.getModel();

        start = LocalDateTime.now();

        List<String> TermList = new LinkedList<String>();
        List<String> DefList = new LinkedList<String>();
        for (String[] CardArray1 : CardArray) {
            TermList.add(CardArray1[0]);
            DefList.add(CardArray1[1]);
        }
        Collections.shuffle(TermList);
        Collections.shuffle(DefList);

        for (int i = 0; i < CardArray.length; i++) {
            termTable.addRow(new Object[]{TermList.get(i)});
            defTable.addRow(new Object[]{DefList.get(i)});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DefTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TermTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        SubmitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        DefTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Definition"
            }
        ));
        jScrollPane1.setViewportView(DefTable);

        TermTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Term"
            }
        ));
        jScrollPane2.setViewportView(TermTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Flashcards");

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        SubmitButton.setText("Submit Match");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SubmitButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BackButton)
                        .addGap(87, 87, 87)
                        .addComponent(jLabel1)
                        .addGap(0, 203, Short.MAX_VALUE)))
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BackButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SubmitButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        Home HomeScreen = new Home(currentUser,loginUsers);
        HomeScreen.setLocationRelativeTo(this);
        this.dispose();
        HomeScreen.setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        if (TermTable.getRowCount() > 1 && DefTable.getRowCount() > 1) {
            int selectedTerm = TermTable.getSelectedRow();
            int selectedDef = DefTable.getSelectedRow();
            String Term = TermTable.getValueAt(selectedTerm, 0).toString();
            String Def = DefTable.getValueAt(selectedDef, 0).toString();
            if (currentSet.containArray(Term, Def) != -1) {
                termTable.removeRow(selectedTerm);
                defTable.removeRow(selectedDef);
            } else {
                TermTable.setSelectionBackground(red);
                DefTable.setSelectionBackground(red);
                Timer timer = new Timer(1000, new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        TermTable.setSelectionBackground(Default);
                        DefTable.setSelectionBackground(Default);
                    }
                });
                timer.start();
            }
        } else {
            LocalDateTime end = LocalDateTime.now();
            long diffInSeconds = ChronoUnit.SECONDS.between(start, end);

                JOptionPane.showMessageDialog(null, "YOU FINISH IN: " + diffInSeconds+" Seconds");
                Home HomeScreen = new Home(currentUser,loginUsers);
                HomeScreen.setLocationRelativeTo(this);
                this.dispose();
                HomeScreen.setVisible(true);


        }
    }//GEN-LAST:event_SubmitButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JTable DefTable;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JTable TermTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
